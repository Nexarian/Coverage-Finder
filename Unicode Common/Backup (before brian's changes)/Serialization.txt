**************** EXPLANATION OF HOW TO USE FILESTREAM SERIALIZATION AND ASSOCIATED CLASSES ****************

FileStream serialization is meant to replace MFC seralization - but the two are not mutally exclusive

This method is not quite as flexible as MFC, but it will work with templates

Any and all objects wishing to be persisted by FileStream serialization must inherit from the
persistant object class (PersistantObject.h)

This means:

- They must declare the DataTransaction function: 
virtual void DataTransaction(FileStream &File);

- Specify the variables that are to be loaded and saved using the overloaded operators
In the constructor these two lines must appear:

SetDerivedClassName(typeid(*this).name());
FileStream::Classes().AddFactory(new Factory< class name here >);

When loading a class the factory for that class must appear:

FileStream::Classes().AddFactory(new Factory< class name here>);

When loading classes or strings, FileStream will create the objects for you,
however, they must be deleted by your program or else a memory lead will occur

To delete a string:

delete [] String;

To delete a class

delete ClassVariableHere;


Since a vector does not support this method of serialization a Book class has been provided
(book.h)
This class contains nearly all the normal functionality of a vector (except iterators)
and is serializable using FileStream.

A book is only a 1 dimensional array, a problem arises if a program needs more than one dimension.
Therefore, an array class
(multiarray.h)
Had been provided. MultiArray supports 1 (equivlent to a book - which should be used instead of a 1-D MultiArray unless you know what your doing)
2, and 3,...x dimensional arrays and is seralizable using FileStream..